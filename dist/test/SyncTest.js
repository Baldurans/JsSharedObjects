"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncTest = void 0;
var Example_1 = require("./Example");
function toStr(obj) {
    var str = [];
    for (var k in obj) {
        str.push(k + "=" + obj[k]);
    }
    return "{" + str.join(", ") + "}";
}
function compare(msg, a, b) {
    var astr = toStr(a);
    var bstr = toStr(b);
    if (astr === bstr) {
        console.log(msg + ") " + astr + " === " + bstr);
    }
    else {
        throw new Error(msg + ") " + astr + " === " + bstr);
    }
}
function comapreArray(msg, a, b) {
    var maxLen = Math.max(a.length, b.length);
    for (var i = 0; i < maxLen; i++) {
        try {
            compare(msg + " [" + i + "] ", a[i], b[i]);
        }
        catch (e) {
            console.error(a, b);
            throw e;
        }
    }
}
function expectThrow(func) {
    var did = false;
    try {
        func();
        did = true;
    }
    catch (e) {
        if (did) {
            throw new Error("Expected to throw!");
        }
        console.log("Nice, threw Exception!");
    }
}
var SyncTest = /** @class */ (function () {
    function SyncTest() {
    }
    SyncTest.test = function () {
        var obj1 = { metaId: 1, x: 2, y: 3, sx: 12345, sy: 54321 };
        var obj2 = { metaId: 2, x: 4, y: 5, sx: 11111, sy: 22222 };
        var obj3 = { metaId: 3, x: 6, y: 7, sx: 3333, sy: 4444 };
        var obj4 = { metaId: 4, x: 8, y: 9, sx: 3333, sy: 4444 };
        var obj5 = { metaId: 5, x: 8, y: 9, sx: 3333, sy: 4444 };
        var main = new Example_1.ExampleMasterObjectArray(5);
        var slave = new Example_1.ExampleSlaveObjectArray(main.export()).init();
        function sync(updated, deleted) {
            main.flushToMemorySync();
            var res = slave.sync();
            comapreArray("updated", res.updated, updated);
            comapreArray("deleted", res.deleted, deleted);
        }
        function compareState(store, match) {
            comapreArray("state", store.getArray(), match);
        }
        compareState(main, [null, null, null, null, null]);
        compareState(slave, [null, null, null, null, null]);
        main.dirtyObject(obj1);
        main.dirtyObject(obj2);
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [null, null, null, null, null]);
        sync([obj1, obj2], []);
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [obj1, obj2, null, null, null]);
        main.replaceObjectAtIndex(4, obj5);
        compareState(main, [obj1, obj2, null, null, obj5]);
        compareState(slave, [obj1, obj2, null, null, null]);
        sync([obj5], []);
        compareState(main, [obj1, obj2, null, null, obj5]);
        compareState(slave, [obj1, obj2, null, null, obj5]);
        expectThrow(function () {
            main.dirtyObject(obj3);
        });
        compareState(main, [obj1, obj2, null, null, obj5]);
        compareState(slave, [obj1, obj2, null, null, obj5]);
        sync([], []);
        compareState(main, [obj1, obj2, null, null, obj5]);
        compareState(slave, [obj1, obj2, null, null, obj5]);
        main.deleteObject(obj5);
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [obj1, obj2, null, null, obj5]);
        sync([], [obj5]);
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [obj1, obj2, null, null, null]);
        main.moveAllToLeft();
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [obj1, obj2, null, null, null]);
        sync([], []);
        compareState(main, [obj1, obj2, null, null, null]);
        compareState(slave, [obj1, obj2, null, null, null]);
        main.dirtyObject(obj3);
        compareState(main, [obj1, obj2, obj3, null, null]);
        compareState(slave, [obj1, obj2, null, null, null]);
        sync([obj3], []);
        compareState(main, [obj1, obj2, obj3, null, null]);
        compareState(slave, [obj1, obj2, obj3, null, null]);
        main.deleteObject(obj1);
        compareState(main, [null, obj2, obj3, null, null]);
        compareState(slave, [obj1, obj2, obj3, null, null]);
        sync([], [obj1]);
        compareState(main, [null, obj2, obj3, null, null]);
        compareState(slave, [null, obj2, obj3, null, null]);
        main.dirtyObject(obj4);
        compareState(main, [obj4, obj2, obj3, null, null]);
        compareState(slave, [null, obj2, obj3, null, null]);
        sync([obj4], []);
        compareState(main, [obj4, obj2, obj3, null, null]);
        compareState(slave, [obj4, obj2, obj3, null, null]);
        main.replaceObjectAtIndex(2, obj4);
        compareState(main, [null, obj2, obj4, null, null]);
        compareState(slave, [obj4, obj2, obj3, null, null]);
        sync([obj4], [obj4]);
        compareState(main, [null, obj2, obj4, null, null]);
        compareState(slave, [null, obj2, obj4, null, null]);
        main.moveAllToLeft();
        compareState(main, [obj2, obj4, null, null, null]);
        compareState(slave, [null, obj2, obj4, null, null]);
        sync([obj4, obj2], [obj4]);
        compareState(main, [obj2, obj4, null, null, null]);
        compareState(slave, [obj2, obj4, null, null, null]);
        main.deleteObject(obj2);
        main.deleteObject(obj4);
        sync([], [obj2, obj4]);
        compareState(main, [null, null, null, null, null]);
        compareState(slave, [null, null, null, null, null]);
    };
    SyncTest.power = function () {
        var MAX = 100000;
        var UPDATE = MAX / 2;
        var initialObjects = [];
        for (var i = 0; i < MAX; i++) {
            initialObjects.push({
                metaId: Math.round(Math.random() * 250) + 1,
                x: Math.round(Math.random() * 250),
                y: Math.round(Math.random() * 250),
                sx: Math.round(Math.random() * 30000),
                sy: Math.round(Math.random() * 30000)
            });
        }
        console.log("Testing with " + MAX + " objects");
        var start = performance.now();
        var main = new Example_1.ExampleMasterObjectArray(MAX);
        for (var i = 0; i < initialObjects.length; i++) {
            main.dirtyObject(initialObjects[i]);
        }
        console.log("A1: " + (performance.now() - start) + " (populate main)");
        var start2 = performance.now();
        main.flushToMemorySync();
        console.log("A2: " + (performance.now() - start2) + " (sync to memory)");
        var start3 = performance.now();
        var slave = new Example_1.ExampleSlaveObjectArray(main.export()).init();
        console.log("A3: " + (performance.now() - start3) + " (start slave)");
        var start4 = performance.now();
        slave.sync();
        console.log("A4: " + (performance.now() - start4) + " (populate slave)");
        var start5 = performance.now();
        main.flushToMemorySync();
        console.log("A5: " + (performance.now() - start5) + " (empty flush from main)");
        var start6 = performance.now();
        slave.sync();
        console.log("A6: " + (performance.now() - start6) + " (empty read from slave)");
        var start7 = performance.now();
        slave.sync();
        console.log("A7: " + (performance.now() - start7) + " (empty read from slave)");
        var start8 = performance.now();
        var objects = main.getArray();
        for (var i = 0; i < UPDATE; i++) {
            objects[i].x = 10;
            main.dirtyObject(objects[i]);
        }
        for (var i = UPDATE; i < UPDATE + UPDATE; i++) {
            main.deleteObject(objects[i]);
        }
        console.log("A8: " + (performance.now() - start8) + " (update elements, delete elements)");
        var start9 = performance.now();
        main.flushToMemorySync();
        console.log("A9: " + (performance.now() - start9) + " (sync to memory)");
        var start10 = performance.now();
        var res = slave.sync();
        console.log("A10: " + (performance.now() - start10) + " (read from slave - updated: " + res.updated.length + " deleted: " + res.deleted.length + ")");
        var start11 = performance.now();
        var res2 = slave.sync();
        console.log("A11: " + (performance.now() - start11) + " (read from slave - updated: " + res2.updated.length + " deleted: " + res2.deleted.length + ")");
    };
    return SyncTest;
}());
exports.SyncTest = SyncTest;
//# sourceMappingURL=data:application/json;base64,